name: rust

concurrency:
  cancel-in-progress: false
  group: ${{ github.workflow }}-${{ github.ref }}

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full

on:
  pull_request:
    branches: [ main, master ]
    types: [ opened, synchronize, reopened ]
    paths:
      - "**/rust.yml"
      - "**/*.rs"
      - "**/Cargo.*"
  push:
    branches: [ main, master ]
    tags: [ latest, v*, "*-nightly" ]
  repository_dispatch:
    types: [ rust ]
  workflow_dispatch:
    inputs:
      benchmark:
        default: false
        description: 'Run benchmarks'
        required: true
        type: boolean
      no_std:
        default: false
        description: 'Run tests with no_std feature'
        required: true
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [ x86_64-unknown-linux-gnu ]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache-key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          target: ${{ matrix.target }}
      -
        name: Build the workspace
        run: cargo build --release --locked --workspace --all-features --target ${{ matrix.target }}
  benchmark: 
    if: github.event_name == 'repository_dispatch' || github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') || github.event.inputs.benchmark == 'true'
    needs: build
    runs-on: ubuntu-latest
    outputs:
      results: ${{ steps.artifacts.outputs.artifact-id }}
      url: ${{ steps.artifacts.outputs.artifact-url }}
    permissions:
      contents: write
      checks: write
    strategy:
      fail-fast: false
      matrix:
        features: [ full ]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache-key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      -
        name: Benchmark (${{ matrix.features }})
        run: cargo bench --locked --verbose --workspace --features ${{ matrix.features }} --
      - 
        name: Upload the benchmarks
        id: artifacts
        uses: actions/upload-artifact@v4
        with:
          name: benchmarks@${{ github.sha }}
          if-no-files-found: error
          overwrite: true
          path: target/criterion/
  test:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        features:  [ full ]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache-key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      -
        name: Test (${{ matrix.features }})
        run: cargo test -r --locked --workspace --features ${{ matrix.features }}
  test_std:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        features:  [ default ]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache-key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      -
        if: matrix.features == 'default'
        name: Test (default)
        run: cargo test -r --locked --workspace
      -
        if: matrix.features == 'all'
        name: Test (all-features)
        run: cargo test -r --locked --workspace --all-features
  test_no_defaults:
    if: github.event.inputs.no_std == 'true'
    continue-on-error: true
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        features:  [ alloc, no_std ]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache-key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          toolchain: nightly
          override: true
      -
        name: Test (no_std)
        if: matrix.features == 'no_std'
        run: cargo test -r --locked --workspace --no-default-features
      -
        name: Test (${{ matrix.features }})
        if: matrix.features != 'no_std'
        run: cargo test -r --locked --workspace --no-default-features --features ${{ matrix.features }}
        env:
          RUSTFLAGS: "-C panic=abort -Z panic_abort_tests"
    